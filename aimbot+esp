if not game:IsLoaded() then game.Loaded:Wait() end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Configuration
local Config = {
    ESP = {
        Enabled     = true,
        TeamCheck   = false,
        ShowOutline = true,
        ShowLines   = true,
        Rainbow     = false,
        FillColor   = Color3.fromRGB(255,255,255),
        OutlineColor= Color3.fromRGB(255,255,255),
        TextColor   = Color3.fromRGB(255,255,255),
        LineColor   = Color3.fromRGB(255,255,255),
        FillTransparency    = 0.5,
        OutlineTransparency = 0,
        Font        = Enum.Font.SciFi,
        TeamColor   = Color3.fromRGB(0,255,0),
        EnemyColor  = Color3.fromRGB(255,0,0),
        ToggleKey   = Enum.KeyCode.RightBracket,
    },
    Aimbot = {
        Enabled         = false,
        TeamCheck       = true,
        VisibilityCheck = true,
        FOV             = 150,
        Smoothing       = 1,
        ToggleKey       = Enum.KeyCode.F,
        FOVColor        = Color3.fromRGB(255,128,128),
        FOVRainbow      = false,
    },
    PlayerNameType = "DisplayName",
    MenuCollapsed = false,
}

-- State
local ESPs, Lines = {}, {}
local FOVCircle

local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.NumSides = 100
FOVCircle.Filled = false
FOVCircle.Visible = false

-- Utils
local function getName(p) return p[Config.PlayerNameType] or p.Name end
local function getHealth(p)
    local h = p.Character and p.Character:FindFirstChild("Humanoid")
    return (h and h.Health>0) and math.floor(h.Health) or 0
end
local function isAlive(p) return getHealth(p)>0 end
local function getRainbow() return Color3.fromHSV((tick()%5)/5,1,1) end
local function getESPColor(p)
    if Config.ESP.Rainbow then return getRainbow() end
    if Config.ESP.TeamCheck then return (p.TeamColor==Players.LocalPlayer.TeamColor) and Config.ESP.TeamColor or Config.ESP.EnemyColor end
    return Config.ESP.FillColor
end
local function getOutlineColor(p)
    if Config.ESP.Rainbow then return getRainbow() end
    if Config.ESP.TeamCheck then return (p.TeamColor==Players.LocalPlayer.TeamColor) and Config.ESP.TeamColor or Config.ESP.EnemyColor end
    return Config.ESP.OutlineColor
end
local function rayVisible(p)
    if not Config.Aimbot.VisibilityCheck then return true end
    local cam=workspace.CurrentCamera
    local head=p.Character and p.Character:FindFirstChild("Head") if not head then return false end
    local rp=RaycastParams.new()
    rp.FilterType=Enum.RaycastFilterType.Blacklist
    rp.FilterDescendantsInstances={Players.LocalPlayer.Character,p.Character}
    return not workspace:Raycast(cam.CFrame.Position, head.Position-cam.CFrame.Position, rp)
end

-- ESP handlers
local function createOrUpdateESP(p)
    if not ESPs[p] then
        local hl=Instance.new("Highlight"); hl.Adornee=p.Character; hl.DepthMode=Enum.HighlightDepthMode.AlwaysOnTop; hl.Parent=p.Character
        local bg=Instance.new("BillboardGui",p.Character); bg.AlwaysOnTop=true; bg.Size=UDim2.new(0,200,0,30); bg.StudsOffset=Vector3.new(0,2,0)
        local tl=Instance.new("TextLabel",bg); tl.Size=UDim2.new(1,0,1,0); tl.BackgroundTransparency=1; tl.Font=Config.ESP.Font; tl.TextSize=18
        ESPs[p]={hl=hl,bg=bg,tl=tl}
    end
    local d=ESPs[p]
    d.hl.FillColor=getESPColor(p); d.hl.FillTransparency=Config.ESP.FillTransparency
    d.hl.OutlineColor=getOutlineColor(p); d.hl.OutlineTransparency=Config.ESP.ShowOutline and Config.ESP.OutlineTransparency or 1
    d.tl.TextColor3=Config.ESP.TextColor
    d.tl.Text=string.format("%s | HP:%d | %dm",getName(p),getHealth(p),math.floor((Players.LocalPlayer.Character.HumanoidRootPart.Position-p.Character.HumanoidRootPart.Position).Magnitude))
end
local function removeESP(p)
    if ESPs[p] then ESPs[p].hl:Destroy(); ESPs[p].bg:Destroy(); ESPs[p]=nil end
    if Lines[p] then Lines[p]:Remove(); Lines[p]=nil end
end

-- Clean up on player leaving
Players.PlayerRemoving:Connect(function(player)
    if ESPs[player] then
        ESPs[player].hl:Destroy()
        ESPs[player].bg:Destroy()
        ESPs[player] = nil
    end
    if Lines[player] then
        Lines[player]:Remove()
        Lines[player] = nil
    end
end)

local function getClosestTarget()
    local cam = workspace.CurrentCamera
    local closest, minDist = nil, Config.Aimbot.FOV

    for _, p in ipairs(Players:GetPlayers()) do
        if p == Players.LocalPlayer then continue end
        if Config.Aimbot.TeamCheck and p.Team == Players.LocalPlayer.Team then continue end
        if not isAlive(p) then continue end
        if Config.Aimbot.VisibilityCheck and not rayVisible(p) then continue end

        local head = p.Character and p.Character:FindFirstChild("Head")
        if not head then continue end
        local screenPos, onScreen = cam:WorldToViewportPoint(head.Position)
        if not onScreen then continue end

        local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)).Magnitude
        if dist < minDist then
            closest = head
            minDist = dist
        end
    end
    return closest
end

-- Render loop: only alive players on server
RunService.RenderStepped:Connect(function()
    local cam = workspace.CurrentCamera
    for _, player in ipairs(Players:GetPlayers()) do
        local char = player.Character
        local hum = char and char:FindFirstChild("Humanoid")
        local root = char and char:FindFirstChild("HumanoidRootPart")
        if player ~= Players.LocalPlayer and hum and hum.Health > 0 and root then
            if Config.ESP.Enabled then
                createOrUpdateESP(player)
                if Config.ESP.ShowLines then
                    if not Lines[player] then
                        local ln = Drawing.new("Line")
                        ln.Thickness    = 2
                        ln.Transparency = 1
                        Lines[player]   = ln
                    end
                    local pos, onScreen = cam:WorldToViewportPoint(root.Position)
                    Lines[player].Visible = onScreen
                    if onScreen then
                        Lines[player].From  = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y)
                        Lines[player].To    = Vector2.new(pos.X, pos.Y)
                        Lines[player].Color = getESPColor(player)
                    end
                elseif Lines[player] then
                    Lines[player].Visible = false
                end
            else
                removeESP(player)
            end
        else
            removeESP(player)
        end
    end

    -- Aimbot
if Config.Aimbot.Enabled then
    local target = getClosestTarget()
    if target then
        local cam = workspace.CurrentCamera
        local direction = (target.Position - cam.CFrame.Position).Unit
        local newLookVector = cam.CFrame.Position + direction / Config.Aimbot.Smoothing
        cam.CFrame = CFrame.lookAt(cam.CFrame.Position, newLookVector)
    end
end

-- FOV Circle update
local cam = workspace.CurrentCamera
FOVCircle.Visible = Config.Aimbot.Enabled
FOVCircle.Position = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)
FOVCircle.Color = Config.Aimbot.FOVRainbow and getRainbow() or Config.Aimbot.FOVColor
FOVCircle.Radius = Config.Aimbot.FOV


    -- Aimbot logic unchanged below...
end)

-- Hotkeys binding
UserInputService.InputBegan:Connect(function(inp, gp)
    if gp then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard then
        if inp.KeyCode == Config.ESP.ToggleKey then
            Config.ESP.Enabled = not Config.ESP.Enabled
            print("ESP toggled:", Config.ESP.Enabled)
        elseif inp.KeyCode == Config.Aimbot.ToggleKey then
            Config.Aimbot.Enabled = not Config.Aimbot.Enabled
            print("Aimbot toggled:", Config.Aimbot.Enabled)
        end
    end
end)

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui", CoreGui)
ScreenGui.Name = "AimbotESP_UI"

local main = Instance.new("Frame", ScreenGui)
main.Name = "Main"
main.Size = UDim2.new(0, 280, 0, 800)
main.Position = UDim2.new(0, 20, 0, 20)
main.BackgroundColor3 = Color3.fromRGB(25,25,35)
main.Active = true
main.Draggable = true
Instance.new("UICorner", main).CornerRadius = UDim.new(0,10)

-- Collapse button
local collapseBtn = Instance.new("TextButton", main)
collapseBtn.Name = "Collapse"
collapseBtn.Size = UDim2.new(0,30,0,30)
collapseBtn.Position = UDim2.new(1,-35,0,5)
collapseBtn.Text = "−"
collapseBtn.Font = Enum.Font.GothamBold
collapseBtn.TextSize = 18
collapseBtn.TextColor3 = Color3.new(1,1,1)
collapseBtn.BackgroundColor3 = Color3.fromRGB(255,100,100)
Instance.new("UICorner", collapseBtn).CornerRadius = UDim.new(0,6)

-- Title
local title = Instance.new("TextLabel", main)
title.Name = "Title"
title.Size = UDim2.new(1,-40,0,30)
title.Position = UDim2.new(0,10,0,5)
title.Text = "GUI by sslkin"
title.Font = Enum.Font.GothamBold
title.TextSize = 14
title.TextColor3 = Color3.new(1,1,1)
title.BackgroundTransparency = 1

-- ScrollFrame for settings
local scroll = Instance.new("ScrollingFrame", main)
scroll.Name = "Settings"
scroll.Size = UDim2.new(1,0,1,-60)
scroll.Position = UDim2.new(0,0,0,60)
scroll.BackgroundTransparency = 1
scroll.CanvasSize = UDim2.new(0,0,0,600)
scroll.ScrollBarThickness = 6
local layout = Instance.new("UIListLayout", scroll)
layout.Padding = UDim.new(0,6)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- Smooth collapse toggle
collapseBtn.MouseButton1Click:Connect(function()
    Config.MenuCollapsed = not Config.MenuCollapsed
    local collapsed = Config.MenuCollapsed
    local size = collapsed and UDim2.new(0,280,0,40) or UDim2.new(0,280,0,800)
    local text = collapsed and "+" or "−"
    local color = collapsed and Color3.fromRGB(100,255,100) or Color3.fromRGB(255,100,100)
    TweenService:Create(main, TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{Size=size}):Play()
    TweenService:Create(collapseBtn, TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundColor3=color}):Play()
    collapseBtn.Text = text
    scroll.Visible = not collapsed
end)

-- GUI helper functions
local function header(txt)
    local lbl = Instance.new("TextLabel", scroll)
    lbl.Size = UDim2.new(0,260,0,25)
    lbl.BackgroundTransparency = 1
    lbl.Text = "🔹 "..txt
    lbl.TextColor3 = Color3.fromRGB(140,200,255)
    lbl.Font = Enum.Font.GothamBold
    lbl.TextSize = 14
    lbl.TextXAlignment = Enum.TextXAlignment.Left
end

local function toggle(name, getf, setf)
    local btn = Instance.new("TextButton", scroll)
    btn.Size = UDim2.new(0,260,0,30)
    btn.BackgroundColor3 = Color3.fromRGB(40,40,60)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    local function upd() btn.Text = name..": "..(getf() and "ON" or "OFF") end
    upd()
    btn.MouseButton1Click:Connect(function() setf(not getf()); upd() end)
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
end

local function bindKey(label, getf, setf)
    local btn = Instance.new("TextButton", scroll)
    btn.Size = UDim2.new(0,260,0,30)
    btn.BackgroundColor3 = Color3.fromRGB(60,60,80)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    local function upd() btn.Text = label..": ["..getf().Name.."]" end
    upd()
    btn.MouseButton1Click:Connect(function()
        btn.Text = "Press key..."
        local conn
        conn = UserInputService.InputBegan:Connect(function(i,g)
            if not g and i.UserInputType==Enum.UserInputType.Keyboard then
                setf(i.KeyCode)
                upd()
                conn:Disconnect()
            end
        end)
    end)
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
end

local function slider(label, minv, maxv, getf, setf)
    local lbl = Instance.new("TextLabel", scroll)
    lbl.Size = UDim2.new(0,260,0,20)
    lbl.BackgroundTransparency = 1
    lbl.TextColor3 = Color3.fromRGB(220,220,220)
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 12
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    local function upd() lbl.Text = label..": "..getf() end
    upd()

    local btn = Instance.new("TextButton", scroll)
    btn.Size = UDim2.new(0,260,0,20)
    btn.Text = "Set "..label
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 12
    btn.BackgroundColor3 = Color3.fromRGB(70,70,90)
    btn.MouseButton1Click:Connect(function()
        local v = getf() + 25
        if v > maxv then v = minv end
        setf(v)
        upd()
    end)
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
end

local function colorPicker(label, getf, setf)
    local btn = Instance.new("TextButton", scroll)
    btn.Size = UDim2.new(0,260,0,30)
    btn.BackgroundColor3 = getf()
    btn.Text = "🎨 "..label
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    btn.MouseButton1Click:Connect(function()
        local list = {
            Color3.fromRGB(255,255,255),
            Config.ESP.TeamColor,
            Config.ESP.EnemyColor,
            Color3.fromRGB(255,0,255),
            Color3.fromRGB(0,255,255),
            Color3.fromRGB(255,165,0),
            Color3.fromRGB(128,0,128),
        }
        local c = getf()
        local idx = table.find(list, c) or 1
        local nc = list[idx % #list + 1]
        setf(nc)
        btn.BackgroundColor3 = nc
    end)
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
end

-- Populate GUI
header("ESP Settings")
toggle("ESP Enabled", function() return Config.ESP.Enabled end, function(v) Config.ESP.Enabled = v end)
toggle("Team Check", function() return Config.ESP.TeamCheck end, function(v) Config.ESP.TeamCheck = v end)
toggle("Show Lines", function() return Config.ESP.ShowLines end, function(v) Config.ESP.ShowLines = v end)
toggle("Show Outline", function() return Config.ESP.ShowOutline end, function(v) Config.ESP.ShowOutline = v end)
toggle("Rainbow Mode", function() return Config.ESP.Rainbow end, function(v) Config.ESP.Rainbow = v end)
colorPicker("Fill Color", function() return Config.ESP.FillColor end, function(c) Config.ESP.FillColor = c end)
colorPicker("Outline Color", function() return Config.ESP.OutlineColor end, function(c) Config.ESP.OutlineColor = c end)
bindKey("ESP Toggle Key", function() return Config.ESP.ToggleKey end, function(k) Config.ESP.ToggleKey = k end)

header("Aimbot Settings")
toggle("Aimbot Enabled", function() return Config.Aimbot.Enabled end, function(v) Config.Aimbot.Enabled = v end)
toggle("Team Check", function() return Config.Aimbot.TeamCheck end, function(v) Config.Aimbot.TeamCheck = v end)
toggle("Visibility Check", function() return Config.Aimbot.VisibilityCheck end, function(v) Config.Aimbot.VisibilityCheck = v end)
toggle("FOV Rainbow", function() return Config.Aimbot.FOVRainbow end, function(v) Config.Aimbot.FOVRainbow = v end)
slider("FOV Size", 50,300, function() return Config.Aimbot.FOV end, function(v) Config.Aimbot.FOV = v end)
colorPicker("FOV Color", function() return Config.Aimbot.FOVColor end, function(c) Config.Aimbot.FOVColor = c end)
bindKey("Aimbot Toggle Key", function() return Config.Aimbot.ToggleKey end, function(k) Config.Aimbot.ToggleKey = k end)
